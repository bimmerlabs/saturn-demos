// tile.h
#ifndef TILE_H
#define TILE_H
#include "../palette_config.h"

// this file is autogenerated - see tga_tools.pl

RgbPalette rgbGround = {
    { {9, 133, 79}, {127, 127, 255}, {103, 95, 237}, {31, 201, 65}, {27, 63, 63}, {131, 7, 69}, {225, 205, 73}, {113, 9, 61}, 
      {251, 133, 73}, {101, 175, 231}, {67, 233, 63}, {149, 9, 67}, {129, 249, 83}, {159, 103, 241}, {237, 71, 61}, {75, 19, 55}, 
      {59, 217, 121}, {237, 185, 65}, {163, 155, 239}, {215, 43, 67}, {201, 227, 71}, {9, 139, 79}, {99, 149, 245}, {91, 107, 237}, 
      {49, 221, 63}, {9, 115, 75}, {53, 49, 117}, {213, 201, 125}, {189, 23, 61}, {249, 149, 71}, {105, 247, 77}, {155, 245, 89}, 
      {159, 105, 243}, {249, 111, 67}, {55, 33, 61}, {171, 159, 233}, {209, 51, 121}, {9, 133, 79}, {127, 127, 255}, {103, 95, 237}, 
      {31, 201, 65}, {27, 63, 63}, {131, 7, 69}, {225, 205, 73}, {113, 9, 61}, {251, 133, 73}, {101, 175, 231}, {67, 233, 63}, 
      {149, 9, 67}, {129, 249, 83}, {159, 103, 241}, {237, 71, 61}, {75, 19, 55}, {59, 217, 121}, {237, 185, 65}, {163, 155, 239}, 
      {215, 43, 67}, {201, 227, 71}, {9, 139, 79}, {99, 149, 245}, {91, 107, 237}, {49, 221, 63}, {9, 115, 75}, {53, 49, 117}, 
      {213, 201, 125}, {189, 23, 61}, {249, 149, 71}, {105, 247, 77}, {155, 245, 89}, {159, 105, 243}, {249, 111, 67}, {55, 33, 61}, 
      {171, 159, 233}, {209, 51, 121} }
};

RgbBuff bufferPal = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0 }
};

HslPalette hslGround = {
    { {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
      {0, 0, 0}, {0, 0, 0} }
};

const PaletteGroupList palette_list = {
    {
        { 0, 36 },
        { 37, 73 },
    }
};

PaletteRange tile_range = {palette_list.group[0].lower, palette_list.group[1].upper};
PaletteRange tile1_range = {palette_list.group[0].lower, palette_list.group[0].upper};
PaletteRange tile2_range = {palette_list.group[1].lower, palette_list.group[1].upper};

GlobalHSL tile1_increment = {0, 0, 0};
GlobalHSL tile2_increment = {0, 0, 0};

ImageConfig tile1_img = {
    0, 255, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0)
};

ImageConfig tile2_img = {
    180, 255, 0, toFIXED(0.0), toFIXED(0.0), toFIXED(0.0)
};

static jo_palette ground_palette;

jo_palette	*ground_palette_handling(void)
{
    jo_create_palette(&ground_palette);
    return (&ground_palette);
}

void init_ground(void) {
    jo_img_8bits    img;
    jo_set_tga_palette_handling(ground_palette_handling);
    img.data = JO_NULL;
    jo_tga_8bits_loader(&img, JO_ROOT_DIR, "TILE.TGA", 0);
    jo_background_3d_plane_a_img(&img, ground_palette.id, true, true);
    jo_free_img(&img);
}

#endif // TILE_H
